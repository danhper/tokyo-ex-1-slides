section
  section
    h1 Daniel Perez
    h3
      | CTO @
      a(href="http://claudetech.com" target="_blank") ClaudeTech
    h3
      i.fa.fa-github.fa-margin
      a(href="https://github.com/tuvistavie" target="_blank") tuvistavie
    h3
      a(href="http://tuvistavie.com/tokyo.ex" target="_blank") http://tuvistavie.com/tokyo.ex

  section
    h2 Elixir experience
    ul
      li Using in production for ~3 months
      li
        | Helping to maintain
        a(href="https://github.com/HashNuke/hound")  Hound (browser automation library)
      li Loosely helping in the core
      li Released a few libraries

section
  section
    h2 Today's topic
    h3 What's new in Elixir 1.3

    br
    .fragment(data-fragment-index="2")
      h4 Target audience
      ul
        li Familiar with Elixir
        li.fragment(data-fragment-index="3") More or less aware of 1.2 features

  section
    h3 Elixir 1.3
    ul
      li Deprecation of imperative assignment
      li <code>with</code> improvements
      li Date datatypes
      li Plenty of other stuff

  section
    h3 How to try it
    h4 Normal Install
    pre: code.shell
      | git clone https://github.com/elixir-lang/elixir.git
      | cd elixir
      | make
      | ./bin/iex

    h4 With <a href="https://github.com/taylor/kiex">kiex</a>

    pre: code.shell
      | kiex install master
      | source $HOME/.kiex/elixirs/elixir-master.env
      | iex

section
  section
    h3 Deprecation of imperative assignments
    p
      | From 1.2, conditional variable declaration
      | has been deprecated.
    pre: code.elixir
      include ./snippets/conditional_declaration.exs
    .fragment(data-fragment-index="2")
      p should be written as
      pre: code.elixir
        include ./snippets/functional_declaration.exs

  section
    h3 Deprecation of imperative assignments
    p From 1.3 this code will also give a warning
    pre: code.elixir
      include ./snippets/imperative_assignement.exs
    .fragment(data-fragment-index="2")
      p we can refactor
      pre: code.elixir
        include ./snippets/functional_assignement.exs

  section
    h3 But why?
    p Compare
    pre: code.elixir
      | x = 1
      | with :ok <- :ok do
      |   x = 2
      | end
      | IO.puts(x) # 1
    .fragment(data-fragment-index="2")
      p and
      pre: code.elixir
        | x = 1
        | case :ok do
        |   :ok -> x = 2
        | end
        | IO.puts(x) # 2
    .fragment(data-fragment-index="3")
      p
        | <code>case</code>, <code>cond</code>, <code>receive</code> scope leaks
        br
        | <code>try</code>, <code>with</code>, <code>for</code> scope do not

  section
    h3 Towards new scoping rules (Elixir 2.0)
    p Scope will be consistent, no leaking
    pre: code.elixir
      | x = 1
      | case :ok do
      |   :ok -> x = 2
      | end
      | IO.puts(x) # 1
    p
      | Same goes for <code>receive</code>, <code>cond</code>, and
      | constructs derived, such as <code>if</code>

  section
    h3 What does this give us?
    ul
      li Pros
        ul
          li Consistency
          li Code easier to understand
          li Code easier to refactor
      li Cons
        ul
          li Code sometimes a little verbose

section
  section
    h3 <code>with</code> improvements
    p The new special form <code>with</code> has been introduced in 1.2
    .fragment(data-fragment-index="1")
      pre: code.elixir
        include ./snippets/nested_case.exs
    .fragment(data-fragment-index="2")
      p becomes
      pre: code.elixir
        include ./snippets/nested_case_with.exs
  section
    h3 <code>with</code> improvements
    p Improvements in 1.3
    ul
      li Addition of an <code>else</code> clause
      li Possibility to use guards
  section
    h3 Addition of an <code>else</code> clause
    p We want to rewrite
    pre: code.elixir
      include ./snippets/nested_case_2.exs
  section(data-transition="fade-in slide-out")
    h3 Addition of an <code>else</code> clause
    p Without <code>with</code> <code>else</code> clause
    pre: code.elixir
      include ./snippets/nested_case_2_with_no_else.exs
  section(data-transition="fade-in slide-out")
    h3 Addition of an <code>else</code> clause
    p With <code>with</code> <code>else</code> clause
    pre: code.elixir
      include ./snippets/nested_case_2_with_else.exs

  section
    h3 Support for guards in <code>with</code>
    p We can rewrite
    pre: code.elixir
      include ./snippets/case_guard.exs
    .fragment(data-fragment-index="1")
      p into
      pre: code.elixir
        include ./snippets/with_guard.exs

section
  section
    h3 Date datatypes

    p Before Elixir 1.3, two main libraries for time/date

    ul
      li: a(href="https://github.com/lau/calendar") Calendar
      li: a(href="https://github.com/bitwalker/timex") Timex

    p Both are great, but not (easily) interoperable

  section
    h3 Date datatypes
    p Elixir 1.3 introduces the following types

    ul
      li: code Calendar
      li: code Date
      li: code Time
      li
        code NaiveDateTime
        |  (without timezone)
      li
        code DateTime
        |  (with timezone)

    p and will provide a ISO8601 compatible implementation

section
  h3 <code>escript</code> installation tasks
  p <code>mix escript.build</code> produces a single easy to run binary
  p In Elixir 1.3, tasks to manage <code>escript</code>s have been added
  ul
    li: code mix escript
    li: code mix escript.install URL
    li: code mix escript.uninstall NAME

  .fragment(data-fragment-index="1")
    p One liner in README
    code mix escript.install https://example.com/my-escript

section
  section
    h3 ExUnit pretty diff
    p Before Elixir 1.3
    img.small(src="images/ex_unit_diff_12.png")
  section(data-transition="fade-in slide-out")
    h3 ExUnit pretty diff
    p From Elixir 1.3
    img.small(src="images/ex_unit_diff_13.png")

section
  h3 Make compiler
  p Before 1.3 it was <a href="https://github.com/elixircnx/comeonin/blob/master/mix.exs">a little complicated</a> to run make
  p With Elixir 1.3, simply add <code>:make</code> to compilers
  pre: code.elixir
    | defmodule MyApp.Mixfile do
    |   def project do
    |     [app: my_app,
    |      compilers: [:make] ++ Mix.compilers]
    |   end
    | end

section
  section
    h3 Changes in <code>defdelegate</code>
    p Before 1.3 we could write this
    pre: code.elixir
      | defdelegate [reverse(list), map(list, callback)], to: :lists, append_first: true
    .fragment
      p This is now deprecated:
      pre: code
        | warning: passing a list to Kernel.defdelegate/2 is deprecated,
        |          please define each delegate separately
        | warning: Kernel.defdelegate/2 :append_first option is deprecated
  section
    h3 Changes in <code>defdelegate</code>
    p Before 1.3 we had to write
    pre: code.elixir
      | defdelegate start_session,            to: Hound.Helpers.Session
      | defdelegate start_session(opts),      to: Hound.Helpers.Session
    .fragment
      p From 1.3, we can write
      pre: code.elixir
        | defdelegate start_session(opts \\ []), to: Hound.Helpers.Session

section
  section
    h3 Addition of <code>Process.sleep</code>
    p
      | Before 1.3, we could achieve this with <code>:timer.sleep</code>
      br
      | Probably added mainly for documentation:
      br
      | <strong>we usually do not need it</strong>
  section
    h3 <code>Process.sleep</code> alternatives
    h4 Bad
    pre: code.elixir
      | Task.async fn ->
      |   do_something()
      | end
      | Process.sleep(30_000)
    .fragment
      h4 Good
      pre: code.elixir
        | parent = self()
        | Task.async fn ->
        |   do_something()
        |   send parent, :work_done
        | end
        | receive do
        |   :work_done -> :ok
        | after
        |   30_000 -> :timeout
        | end
  section
    h3 <code>Process.sleep</code> alternatives
    h4 Bad
    pre: code.elixir
      | Task.start fn ->
      |   do_something()
      | end
      | # Wait until task terminates
      | Process.sleep(30_000)
      | # Check if process is alive
    .fragment
      h4 Good
      pre: code.elixir
        | {:ok, pid} = Task.start fn ->
        |   do_something()
        | end
        | ref = Process.monitor(pid)
        | receive do
        |   {:DOWN, ^ref, _, _, _} -> :task_is_down
        | after
        |   30_000 -> :timeout
        | end

section
  h3 <code>optionalcallback</code> and <code>optionalmacrocallback</code>
  ul
    li Possible to achieve something similar with <code>defoverridable</code>
    li Added for better Erlang interoperability
    li Still in discussion in <a href="https://github.com/elixir-lang/elixir/pull/4037">#4037</a>

section
  section
    h3 <code>app.tree</code> and <code>deps.tree</code> mix tasks
    pre: code
      include ./snippets/deps_tree.sh
  section
    h3 <code>app.tree</code> and <code>deps.tree</code> mix tasks
    pre: code
      include ./snippets/app_tree.sh

section
  h3 When can we use it?
  .fragment
    p Soon enough?
    img(src="./images/milestone-13.png")
